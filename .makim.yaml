backend: bash
groups:
  clean:
    env-file: .env
    tasks:
      tmp:
        help: Remove build artifacts, compiled files, and cache
        run: |
          rm -f .coverage
          rm -fr build/
          rm -fr dist/
          rm -fr .eggs/
          rm -fr htmlcov/
          rm -fr .pytest_cache
          rm -fr .ruff_cache
          rm -fr .mypy_cache
          find . -name '*.egg-info' -exec rm -fr {} +
          find . -name '*.egg' -exec rm -f {} +
          find . -name '*.pyc' -exec rm -f {} +
          find . -name '__pycache__' -exec rm -fr {} +
          find . -name '*~' -exec rm -f {} +

  docs:
    help: Commands for building and previewing the documentation
    tasks:
      build:
        help: Build the documentation
        run: mkdocs build --config-file mkdocs.yaml

      preview:
        help: Preview the documentation
        hooks:
          pre-run:
            - task: docs.build
        run: mkdocs serve --watch docs --config-file mkdocs.yaml

  package:
    help: helper commands for handling the package
    tasks:
      build:
        help: Build the project
        run: poetry build

  tests:
    help: Test commands
    tasks:
      linter:
        help: Run lint checks
        run: |
          pre-commit install
          pre-commit run --all-files --verbose

      unit:
        help: Run tests
        args:
          params:
            help: Extra parameters for pytest
            type: string
            default: "-vv"
        run: pytest -s ${{ args.params }} tests

      smoke-1:
        help: Run smoke tests for profile 1
        hooks:
          pre-run:
            - task: docker.killall
        vars:
          SUGAR_FLAGS: --verbose --profile profile1
        run: |
          sugar ${{ vars.SUGAR_FLAGS }} compose build
          sugar ${{ vars.SUGAR_FLAGS }} compose build --all
          sugar ${{ vars.SUGAR_FLAGS }} compose build
          sugar ${{ vars.SUGAR_FLAGS }} compose build --services service1-1
          sugar ${{ vars.SUGAR_FLAGS }} compose pull --all
          sugar ${{ vars.SUGAR_FLAGS }} compose pull
          sugar ${{ vars.SUGAR_FLAGS }} compose pull --services service1-1
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext start --all --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext restart --all --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose exec --service service1-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose stop --all
          sugar ${{ vars.SUGAR_FLAGS }} compose run --service service1-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose down

      smoke-2:
        help: Run smoke tests for profile 2
        hooks:
          pre-run:
            - task: docker.killall
        vars:
          SUGAR_FLAGS: --verbose --profile profile2
        run: |
          sugar ${{ vars.SUGAR_FLAGS }} compose build --all
          sugar ${{ vars.SUGAR_FLAGS }} compose build
          sugar ${{ vars.SUGAR_FLAGS }} compose build --services service2-1
          sugar ${{ vars.SUGAR_FLAGS }} compose pull --all
          sugar ${{ vars.SUGAR_FLAGS }} compose stop --all
          sugar ${{ vars.SUGAR_FLAGS }} compose run --service service2-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose down

      smoke-services:
        help: Run smoke test for services
        hooks:
          pre-run:
            - task: docker.killall
        run: |
          sugar --verbose --file tests/containers/.services.sugar.yaml compose build

      smoke-mix:
        help: Run smoke tests for profile mix
        hooks:
          pre-run:
            - task: docker.killall
        vars:
          SUGAR_FLAGS: --verbose --profile profile-mix
        run: |
          sugar ${{ vars.SUGAR_FLAGS }} compose build --all
          sugar ${{ vars.SUGAR_FLAGS }} compose build
          sugar ${{ vars.SUGAR_FLAGS }} compose build --services service1-1,service2-1
          sugar ${{ vars.SUGAR_FLAGS }} compose pull --all
          sugar ${{ vars.SUGAR_FLAGS }} compose pull
          sugar ${{ vars.SUGAR_FLAGS }} compose pull --services service1-1,service2-1
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext start --all --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext restart --all --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose exec --service service2-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose stop --all
          sugar ${{ vars.SUGAR_FLAGS }} compose run --service service2-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose down

      smoke-main:
        help: Run smoke tests for profile main
        hooks:
          pre-run:
            - task: docker.killall
        vars:
          SUGAR_FLAGS: --verbose --profile profile1
        run: |
          # general tests main profile/plugins
          sugar ${{ vars.SUGAR_FLAGS }} compose build
          sugar ${{ vars.SUGAR_FLAGS }} compose config
          sugar ${{ vars.SUGAR_FLAGS }} compose create
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext start --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext restart --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose exec --service service1-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose images
          sugar ${{ vars.SUGAR_FLAGS }} compose logs
          # port is not complete supported
          # sugar --verbose compose port --service service1-1
          sugar ${{ vars.SUGAR_FLAGS }} compose ps
          sugar ${{ vars.SUGAR_FLAGS }} compose pull
          sugar ${{ vars.SUGAR_FLAGS }} compose push
          sugar ${{ vars.SUGAR_FLAGS }} compose run --service service1-1 --options -T --cmd env
          sugar ${{ vars.SUGAR_FLAGS }} compose top
          sugar ${{ vars.SUGAR_FLAGS }} compose up --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose version
          # port is not complete supported
          export SUGAR_PROJECT_NAME="test-`python -c 'from uuid import uuid4; print(uuid4().hex[:7])'`"
          echo $SUGAR_PROJECT_NAME
          sugar ${{ vars.SUGAR_FLAGS }} compose build
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext start --options -d
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext restart --options -d
          # TODO: it seems that the SUGAR_PROJECT_NAME is not used properly from this block
          # docker ps|grep $SUGAR_PROJECT_NAME
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext stop

      smoke-final:
        help: Run final smoke tests
        hooks:
          pre-run:
            - task: docker.killall
        run: |
          sugar --verbose --profile profile-defaults compose-ext restart --options -d
          sugar --verbose --profile profile1 compose pause
          sugar --verbose --profile profile1 compose unpause
          sugar --verbose --profile profile1 compose kill
          sugar --verbose --profile profile1 compose stop
          sugar --verbose --profile profile1 compose rm --options --force
          sugar --verbose --profile profile1 compose down

      smoke-experimental:
        help: Run simple text for experimental commands
        hooks:
          pre-run:
            - task: docker.killall
        run: |
          sugar --verbose compose attach --help
          sugar --verbose compose cp --help
          sugar --verbose compose ls --help
          sugar --verbose compose scale --help
          sugar --verbose compose wait --help
          sugar --verbose compose watch --help

      smoke-swarm:
        help: Run smoke tests for swarm commands
        hooks:
          pre-run:
            - task: docker.killall
        env:
          SUGAR_FLAGS: --verbose --profile profile1
        run: |
          # Initialize swarm
          sugar ${{ vars.SUGAR_FLAGS }} swarm init --options "--advertise-addr 127.0.0.1"
          echo "Swarm initialized successfully"

          # Test basic swarm commands
          sugar ${{ vars.SUGAR_FLAGS }} swarm ls

          # Create a test service
          docker service create --name test-web nginx:1.19
          echo "Service created, waiting for startup..."
          sleep 3

          # Test inspection commands
          sugar ${{ vars.SUGAR_FLAGS }} swarm inspect --services test-web

          # Test update commands with various options
          echo "Testing image update..."
          sugar ${{ vars.SUGAR_FLAGS }} swarm update --services test-web --image nginx:1.21
          docker service inspect test-web --format "{{.Spec.TaskTemplate.ContainerSpec.Image}}" | grep "nginx:1.21"

          echo "Testing replicas update..."
          sugar ${{ vars.SUGAR_FLAGS }} swarm update --services test-web --replicas 2
          sleep 2
          docker service ls | grep "test-web" | grep "2/2"

          echo "Testing environment variables..."
          sugar ${{ vars.SUGAR_FLAGS }} swarm update --services test-web --env_add "DEBUG=1,LOG_LEVEL=info"
          docker service inspect test-web --format "{{.Spec.TaskTemplate.ContainerSpec.Env}}" | grep "DEBUG=1"

          echo "Testing labels..."
          sugar ${{ vars.SUGAR_FLAGS }} swarm update --services test-web --label_add "environment=testing,tier=frontend"
          docker service inspect test-web --format "{{.Spec.Labels}}" | grep "environment"

          echo "Testing force update..."
          sugar ${{ vars.SUGAR_FLAGS }} swarm update --services test-web --force

          echo "Testing detached update..."
          time sugar ${{ vars.SUGAR_FLAGS }} swarm update --services test-web --image nginx:1.22 --detach

          # Test scaling
          echo "Testing service scaling..."
          sugar ${{ vars.SUGAR_FLAGS }} swarm scale --services test-web --replicas test-web=3
          sleep 2
          docker service ls | grep "test-web" | grep "3/3"

          # Test rollback
          echo "Testing service rollback..."
          sugar ${{ vars.SUGAR_FLAGS }} swarm update --services test-web --image nginx:latest
          sleep 2
          sugar ${{ vars.SUGAR_FLAGS }} swarm rollback --services test-web

          # Test logs
          echo "Testing service logs..."
          sugar ${{ vars.SUGAR_FLAGS }} swarm logs --services test-web --tail 10

          # Test node commands
          echo "Testing node commands..."
          sugar ${{ vars.SUGAR_FLAGS }} swarm node --ls
          NODE_ID=$(docker node ls --format "{{.ID}}" | head -n1)
          echo "Node ID: $NODE_ID"
          sugar ${{ vars.SUGAR_FLAGS }} swarm node --inspect $NODE_ID
          sugar ${{ vars.SUGAR_FLAGS }} swarm node --ps $NODE_ID

          # Create a stack for testing stack commands
          echo "Testing stack commands..."
          echo "version: '3'" > test-stack.yml
          echo "services:" >> test-stack.yml
          echo "  web:" >> test-stack.yml
          echo "    image: nginx:alpine" >> test-stack.yml
          echo "    deploy:" >> test-stack.yml
          echo "      replicas: 1" >> test-stack.yml

          # Deploy stack
          sugar ${{ vars.SUGAR_FLAGS }} swarm create --stack test-stack --file test-stack.yml

          # Test stack commands
          sugar ${{ vars.SUGAR_FLAGS }} swarm ps --stack test-stack

          # Remove stack
          sugar ${{ vars.SUGAR_FLAGS }} swarm rm --stack test-stack

          # Clean up services
          docker service rm test-web

          # Leave swarm
          docker swarm leave --force
          echo "All swarm tests completed successfully!"

          # Clean up test files
          rm -f test-stack.yml

      smoke-hooks:
        help: Run simple text for experimental commands
        hooks:
          pre-run:
            - task: docker.killall
        vars:
          SUGAR_FLAGS: --file .hooks.sugar.yaml
        dir: tests/containers
        run: |
          sugar ${{ vars.SUGAR_FLAGS }} compose config | grep "RUNNING PRE-RUN FOR CONFIG"
          sugar ${{ vars.SUGAR_FLAGS }} compose config | grep "CONFIG EXECUTED WITH SUCCESS"
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext config | grep "RUNNING PRE-RUN FOR CONFIG"
          sugar ${{ vars.SUGAR_FLAGS }} compose-ext config | grep "CONFIG EXECUTED WITH SUCCESS"

      smoke:
        help: Run final smoke tests
        hooks:
          pre-run:
            - task: docker.killall
            - task: tests.smoke-1
            - task: tests.smoke-2
            - task: tests.smoke-mix
            - task: tests.smoke-main
            - task: tests.smoke-final
            - task: tests.smoke-services
            - task: tests.smoke-experimental
            - task: tests.smoke-hooks
        run: |
          sugar --verbose compose --help
          sugar --verbose compose version

  docker:
    help: Commands for docker
    tasks:
      killall:
        help: Kill all running Docker containers
        run: docker kill `docker ps -q` || true

  release:
    vars:
      app: |
        npx --yes \
        -p semantic-release \
        -p conventional-changelog-conventionalcommits@7.0.2 \
        -p "@semantic-release/commit-analyzer" \
        -p "@semantic-release/release-notes-generator" \
        -p "@semantic-release/changelog" \
        -p "@semantic-release/exec" \
        -p "@semantic-release/github" \
        -p "@semantic-release/git" \
        -p "semantic-release-replace-plugin" \
        semantic-release
    tasks:
      ci:
        help: Run semantic-release on CI
        run: |
          ${{ vars.app }} --ci

      dry:
        help: Run semantic-release on CI
        run: |
          ${{ vars.app }} --dry-run
